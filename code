#include "ThingsBoard.h"
#include <WiFi.h>
#include <LiquidCrystal.h>
#define WIFI_AP             "Saiboyshostel404" //wifi name
#define WIFI_PASSWORD       "boyshostel404" //password
// see https://thingsboard.io/docs/getting-started-guides/helloworld/
// to understand how to obtain access token
#define  TOKEN              "sMHiKrXBEpExgW6nvAUx" //access token
#define THINGSBOARD_SERVER  "demo.thingsboard.live"
// Baud rate for debug serial
#define SERIAL_DEBUG_BAUD    115200
//Initialize ThigsBoard client
WiFiClient espClient;
//Initialize ThingsBoard instance
ThingsBoard tb(espClient);
// the WiFi radio's status
int status = WL_IDLE_STATUS;
LiquidCrystal lcd(13, 12, 8, 7, 4, 2);
void setup() {
  // put your setup code here, to run once:
  // initialize serial for debugging
  Serial.begin(SERIAL_DEBUG_BAUD);
   lcd.begin(16,2);
}
void loop() {
  // put your main code here, to run repeatedly:
delay(1000);
if (WiFi.status() != WL_CONNECTED) {
   lcd.setCursor(0, 0);
  lcd.print("Connecting to");
  lcd.setCursor(0, 1);
  lcd.print("SSID"); 
  reconnect();
}
if (!tb.connected()) {
  // connect to the thingsboard
  Serial.print("Connecting to: ");
  Serial.print(THINGSBOARD_SERVER);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Connected to");
  lcd.setCursor(0, 1);
  lcd.print("THINGSBOARD");
  Serial.print("with token ");
  Serial.print(TOKEN);
  if (!tb.connect(THINGSBOARD_SERVER, TOKEN)) {
    lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Failedto Connect");
  lcd.setCursor(0, 1);
  lcd.print("THINGSBOARD");
  delay(1000);
  lcd.clear();
    Serial.println("Failed to connect");
    return;
  }
}
Serial.println("sending data...");
   {
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("SENDING DATA");
    lcd.setCursor(0,1);
    lcd.print("successfull");
    }
// uploads new telementary to thingsboard using MQTT.
//see htpps://thingsboard.io/docs/reference/mqtt-api/#telementary-upload-api
// for more details
tb.sendTelemetryInt("temperature", 22);
tb.sendTelemetryFloat("humidity", 42.5);
{
    lcd.setCursor(0, 1);
    lcd.print("Humidity:");
    lcd.print("%   ");
  delay(3000);
   {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Temperature:");
    
    lcd.print("*C");
  delay(3000);
}
tb.loop();
  }
}
void InitWiFi()
{
Serial.println("Connecting to AP....");
  // attempt to connect to WiFi network
  WiFi.begin(WIFI_AP, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED){
    Serial.print(".");
}
  Serial.println("Connected to AP");
}
void reconnect() {
  //Loop until we're reconnected
  status = WiFi.status();
  if ( status != WL_CONNECTED) {
  
    delay(500);
     lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Conn.. to Wi-Fi");
    lcd.setCursor(0, 1);
    lcd.print("Succesfully.");
    delay(1000);
    lcd.clear();
  }
    else
  {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Unable to read");
    lcd.setCursor(0, 1);
    lcd.print("or No internet!");
  }
  delay(3000);
    WiFi.begin(WIFI_AP, WIFI_PASSWORD);
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
    Serial.println("connected to AP");
  }
